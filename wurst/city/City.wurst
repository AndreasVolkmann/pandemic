package City

import UnitIds
import LinkedList
import HashMap
import Constants
import CityType
import AbilityIds
import Util

public class City
	static let cities = new IterableMap<string, City>()

	string name
	protected vec2 loc
	LinkedList<City> connections = new LinkedList<City>()
	unit cityUnit
	CityType cityType
	let infectionMap = new HashMap<CityType, int>()
	protected var model = UnitIds.circleofpower
	private texttag tag

	construct(string name, real x, real  y, CityType cityType)
		this.name = name
		this.loc = vec2(x * scaleFactor, y * scaleFactor) 
		this.cityType = cityType
		register()

	function getLocation() returns vec2
		return loc

	function build()
		if cityUnit == null
			let u =  createUnit(cityType.getOwner(), model, loc, angle(90))
				..setName(name)
				..setColor(cityType.getColor())
				..setInvulnerable(true)
			tag = CreateTextTagLocBJ(name, u.getLoc(), 40, cityTextSize, 100, 100, 100, 0)
			cityUnit = u
	
	protected function register()
		cities.put(name, this)

	function link(vararg City other)
		build()
		for c in other
			c.build()
			connections.add(c)
			c.connections.add(this)
			buildConnection(this, c)
	
	function buildConnection(City a, City b)
		let distance = a.loc.distanceTo(b.loc)
		let actualFrequency = connectionFrequency * scaleFactor
		let amount = (distance / actualFrequency).toInt()
		for i = 1 to max(amount - 1, 1)
			let next = a.loc.moveTowards(b.loc, i * actualFrequency)
			createUnit(cityType.getOwner(), UnitIds.circleofpower, next, angle(0))
				..setName("From " + a.name + " to " + b.name)
				..setScale(connectionScale)
				..setColor(PLAYER_COLOR_LIGHT_GRAY)
				..addAbility(AbilityIds.locust)

	function proxy(City b, vec2 aProxyLoc, vec2 bProxyLoc)
		new ProxyCity(b, aProxyLoc, this)
		new ProxyCity(this, bProxyLoc, b)

	function infect(int rate) returns int
		var amount = infectionMap.getOrZero(cityType)
		amount = min(3, amount + rate) // don't go beyond limit
		infectionMap.put(cityType, amount)
		updateTextTag()
		return amount

	function treat()
		Log.debug(infectionMap.get(cityType).toString())
		if infectionMap.getOrZero(cityType) > 0
			infectionMap.addInt(cityType, -1)
			updateTextTag()
		

	private function updateTextTag()
		let infection = infectionMap.get(cityType)
		tag.setText(name + " (" + infection.toString() + ")", cityTextSize)
		let red = 100 + infection * 50
		tag.setColor(red, 100, 100, 0)

class ProxyCity extends City
	City actual

	construct(City actual, vec2 loc, City origin)
		super(actual.name, loc.x, loc.y, actual.cityType)
		model = UnitIds.seaturtle
		this.actual = actual
		link(origin)
				
	override function getLocation() returns vec2
		return actual.loc

	override function register()
		return // do not register proxies