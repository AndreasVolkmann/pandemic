package System
import User
import LinkedList
import ConflagrationObjects
import City
import InfoBoard

var turnNumber = 0
let users = new LinkedList<User>()
LLIterator<User> userIterator
let turnOrder = new LinkedList<TurnStatus>()..add(TurnStatus.Start, TurnStatus.Move, TurnStatus.End).staticItr()

public function getCurrentUser() returns User
    return userIterator.current.elem

public function getCurrentPhase() returns TurnStatus
    return turnOrder.current.elem

public function start(LinkedList<player> players)
    players
        .map(p -> new User(p))
        .forEach(u -> users.add(u))
    // start the game loop
    userIterator = users.staticItr()
    userIterator.next()
    next()

function next()
    let status = turnOrder.next()
    let user = getCurrentUser()
    updateUser(user)

    switch status
        case TurnStatus.Start
            Log.info("It is " + user.name + "'s turn")
            updatePhase("Start")
            updateTurn(turnNumber)
            next()
        case TurnStatus.Move
            Log.info("Time to move")
            updatePhase("Move")
            enableMovement(user)
        case TurnStatus.End
            Log.info("Turn has ended")
            updatePhase("End")
            if userIterator.hasNext()
            else 
                userIterator.reset()
            userIterator.next()
            turnOrder.reset()
            turnNumber++
            next()

enum TurnStatus
    Start
    Move
    End
    
function enableMovement(User user)
    user.currentLocation.connections.forEach(con -> con.cityUnit.addAbility(SPELL_ID))

function disableMovement(User user)
    user.currentLocation.connections.forEach(cont -> cont.cityUnit.removeAbility(SPELL_ID))
    
public function move(unit destination)
    let city = cities.get(destination.getName())
    let user = getCurrentUser()
    Log.info("Moving to " + city.name)
    disableMovement(user)
    user.currentLocation = city
    user.hero.setPos(city.loc)
    next()
