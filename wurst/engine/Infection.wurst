package Infection
import LinkedList
import City
import Constants
import HashMap
import CityType
import Util

public class Infection
    var infectionRate = infectionRateStart
    var numOutbreaks = 0
    LinkedList<string> deck
    LLIterator<string> iterator
    let globalInfectionMap = new HashMap<CityType, int>()

    construct(LinkedList<string> deck)
        this.deck = deck.copy()
        shuffle()

    function initialInfection()
        for i = 0 to 2
            for j = 0 to 2
                infectCity(j + 1, true)

    private function shuffle()
        Log.info("Infection deck is empty, shuffling ...")
        // TODO wait a bit :)
        deck.shuffle()
        iterator = deck.iterator()

    function infect()     
        for i = 1 to infectionRate
            infectCity(1, false)
    
    function diseaseSpreadTooMuch() returns boolean

        return false

    private function infectCity(int amount, boolean isInitial)
        if not iterator.hasNext()
            shuffle()
        let cityName = iterator.next()
        let city = cities.get(cityName)
        Log.warn("Infecting: " + city.name)
        increaseGlobalDiseaseCount(city, amount, isInitial)

    function increaseOutBreaks()
        numOutbreaks++
        if numOutbreaks % 2 == 0
            infectionRate++

    private function increaseGlobalDiseaseCount(City city, int amount, boolean isInitial)
        let cityType = city.cityType
        let before = city.infectionMap.get(cityType)
        let cityAmount = city.infect(amount)
        let difference = cityAmount - before
        globalInfectionMap.addInt(cityType, difference)
        if cityAmount >= outbreakLimit and not isInitial
            increaseOutBreaks()
        