package System
import User
import LinkedList
import InfoBoard
import Game
import Movement

Game game
let users = new LinkedList<User>()
LLIterator<User> userIterator
let turnOrder = new LinkedList<TurnStatus>()..add(TurnStatus.Start, TurnStatus.Move, TurnStatus.End).staticItr()

public function getCurrentUser() returns User
    return userIterator.current.elem

public function getCurrentPhase() returns TurnStatus
    return turnOrder.current.elem

public function start(LinkedList<player> players)
    game = new Game()
    players
        .map(p -> new User(p))
        .forEach(u -> users.add(u))
    // start the game loop
    userIterator = users.staticItr()
    userIterator.next()
    next()

function next()
    game.check()
    let status = turnOrder.next()
    let user = getCurrentUser()
    updateUser(user)

    switch status
        case TurnStatus.Start
            Log.info("It is " + user.name + "'s turn")
            updatePhase("Start")
            updateTurn(game.turnNumber)
            next()
        case TurnStatus.Move
            Log.info("Time to move")
            updatePhase("Move")
            enableMovement(user)
        case TurnStatus.End
            Log.info("Turn has ended")
            updatePhase("End")
            if userIterator.hasNext()
            else 
                userIterator.reset()
            userIterator.next()
            turnOrder.reset()
            game.turnNumber++
            next()

enum TurnStatus
    Start
    Move
    End

public function move(unit destination)
    move(getCurrentUser(), destination)
    next()

