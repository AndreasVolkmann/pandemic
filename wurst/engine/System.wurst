package System
import User
import LinkedList
import InfoBoard
import Game
import Movement
import Constants
import TurnStatus

public let system = new System()

public class System
    Game game
    let users = new LinkedList<User>()
    private LLIterator<User> userIterator
    private let turnOrder = new LinkedList<TurnStatus>()
        ..add(TurnStatus.Start, TurnStatus.Move, TurnStatus.Draw, TurnStatus.Infect, TurnStatus.End).staticItr()
    var actions = maxActions

    function getCurrentUser() returns User
        return userIterator.current.elem

    function getCurrentPhase() returns TurnStatus
        return turnOrder.current.elem

    function start(LinkedList<player> players)
        game = new Game()
        players
            .map(p -> new User(p))
            .forEach(u -> users.add(u))
        // start the game loop
        userIterator = users.staticItr()
        userIterator.next()
        next()

    private function getNextStatus() returns TurnStatus
        let current = turnOrder.current.elem
        if current == TurnStatus.Move and actions > 0
            return current
        else 
            actions = maxActions
            return turnOrder.next()
        
    private function next()
        if game.check()
            return // end of game
        let status = getNextStatus()
        let user = getCurrentUser()
        updateUser(user)
        updatePhase(status)

        switch status
            case TurnStatus.Start
                Log.info("It is " + user.name + "'s turn")
                updateTurn(game.turnNumber)
                next()
            case TurnStatus.Move
                Log.info("Actions left: " + actions.toString())
                enableMovement(user)
                actions--
            case TurnStatus.Draw
                next()
            case TurnStatus.Infect
                Log.info("Infection")
                game.infect()
                updateInfection(game.infection)
                next()
            case TurnStatus.End
                Log.info("Turn has ended")
                if not userIterator.hasNext()
                    userIterator.reset()
                userIterator.next()
                turnOrder.reset()
                game.turnNumber++
                next()

    function move(unit destination)
        getCurrentUser().move(destination)
        next()

    function treat()
        next()

    function cure()
        next()

    function build()
        next()

    function share()
        next()
    
    function pass()
        next()
