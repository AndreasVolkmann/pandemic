package City

import UnitIds
import LinkedList
import HashMap
import Constants
import CityType
import AbilityIds

public let cities = new IterableMap<string, City>()
public let cityNames = new LinkedList<string>()

public class City
	string name
	protected vec2 loc
	LinkedList<City> connections = new LinkedList<City>()
	unit cityUnit
	CityType cityType
	let infectionMap = new HashMap<CityType, int>()
	protected var model = UnitIds.circleofpower
	private texttag tag

	construct(string name, real x, real  y, CityType cityType)
		this.name = name
		this.loc = vec2(x * scaleFactor, y * scaleFactor) 
		this.cityType = cityType

	function getLocation() returns vec2
		return loc

	function build()
		if cityUnit == null
			let u =  createUnit(cityType.getOwner(), model, loc, angle(90))
				..setName(name)
				..setColor(cityType.getColor())
				..setInvulnerable(true)
			tag = CreateTextTagLocBJ(name, u.getLoc(), 40, cityTextSize, 100, 100, 100, 0)
			cityUnit = u
			register()
	
	protected function register()
		cities.put(name, this)
		cityNames.add(name)

	function link(vararg City other)
		build()
		for c in other
			c.build()
			connections.add(c)
			c.connections.add(this)
			buildConnection(this, c)
	
	function buildConnection(City a, City b)
		let distance = a.loc.distanceTo(b.loc)
		let actualFrequency = connectionFrequency * scaleFactor
		let amount = (distance / actualFrequency).toInt()
		for i = 1 to max(amount - 1, 1)
			let next = a.loc.moveTowards(b.loc, i * actualFrequency)
			createUnit(cityType.getOwner(), UnitIds.circleofpower, next, angle(0))
				..setName("From " + a.name + " to " + b.name)
				..setScale(connectionScale)
				..setColor(PLAYER_COLOR_LIGHT_GRAY)
				..addAbility(AbilityIds.locust)

	function proxy(City b, vec2 aProxyLoc, vec2 bProxyLoc)
		new ProxyCity(b, aProxyLoc, this)
		new ProxyCity(this, bProxyLoc, b)

	function infect(int rate) returns boolean
		int amount
		if infectionMap.has(cityType)
			amount = infectionMap.get(cityType)
		else 
			amount = 0
		amount = min(3, amount + rate) // don't go beyond limit
		infectionMap.put(cityType, amount)
		updateTextTag()
		return amount >= outbreakLimit

	private function updateTextTag()
		let infection = infectionMap.get(cityType)
		tag.setText(name + " (" + infection.toString() + ")", cityTextSize)
		let red = 100 + infection * 50
		tag.setColor(red, 100, 100, 0)

class ProxyCity extends City
	City actual

	construct(City actual, vec2 loc, City origin)
		super(actual.name, loc.x, loc.y, actual.cityType)
		model = UnitIds.seaturtle
		this.actual = actual
		link(origin)
		
		
	override function getLocation() returns vec2
		return actual.loc

	override function register()
		return // do not register proxies


//let shenzhen = new City("Shenzhen", 20, 5)
let london = new City("London", -5, 5, CityType.Blue)
let paris = new City("Paris", -1, -1, CityType.Blue)
let madrid = new City("Madrid", -6, -7, CityType.Blue)
let newYork = new City("New York", -20, 1, CityType.Blue)
let montreal = new City("Montreal", -30, 5, CityType.Blue)
let saoPaulo = new City("Sao Paulo", -12, -30, CityType.Yellow)
let bogota = new City("Bogota", -30, -15, CityType.Yellow)
let miami = new City("Miami", -30, -10, CityType.Yellow)
let washington = new City("Washington", -25, -8, CityType.Blue)
let atlanta = new City("Atlanta", -35, -8, CityType.Blue)
let chicago = new City("Chicago", -40, 0, CityType.Blue)
let sanFrancisco = new City("San Francisco", -50, -1, CityType.Blue)
let algiers = new City("Algiers", 5, -10, CityType.Black)
let cairo = new City("Cairo", 15, -12, CityType.Black)
let riyadh = new City("Riyadh", 25, -17, CityType.Black)
let karachi = new City("Karachi", 35, -10, CityType.Black)
let delhi = new City("Delhi", 45, -5, CityType.Black)
let kolkata = new City("Kolkata", 55, -9, CityType.Black)
let hongKong = new City("Hong Kong", 70, -16, CityType.Red)
let shanghai = new City("Shanghai", 71, -5, CityType.Red)
let tokyo = new City("Tokyo", 80, 1, CityType.Red)
let kartoum = new City("Kartoum", 15, -20, CityType.Yellow)
let lagos = new City("Lagos", 4, -20, CityType.Yellow)

public function createCities()
	london.link(paris, madrid, newYork)
	paris.link(madrid)
	madrid.link(newYork, saoPaulo)
	bogota.link(saoPaulo, miami)
	washington.link(miami, newYork, montreal, atlanta)
	atlanta.link(miami, chicago)
	montreal.link(newYork, chicago)
	chicago.link(sanFrancisco)
	algiers.link(paris, madrid, cairo)
	kartoum.link(cairo, lagos)
	lagos.link(saoPaulo)
	riyadh.link(cairo, karachi)
	delhi.link(karachi, kolkata)
	hongKong.link(kolkata, shanghai)
	tokyo.link(shanghai)
	sanFrancisco.proxy(tokyo, 
		vec2(sanFrancisco.loc.x / scaleFactor - 20, sanFrancisco.loc.y /scaleFactor), 
		vec2(tokyo.loc.x / scaleFactor + 20, tokyo.loc.y / scaleFactor))
